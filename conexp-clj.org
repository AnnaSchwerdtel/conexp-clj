# -*- mode: org -*-
#+startup: content
#+startup: hidestars
#+filetags: CONEXP
#+category: conexp-clj

* Script
** DONE Add readline support
   using jline
* Lattice Drawing
** TODO Adjusting nodes in lattice diagram with parallelogram rule
** TODO draw-lattice-to-file
   We need some function (i.e. draw-lattice-to-file) which produces a
   file of the picture of a lattice layout, when given the same
   arguments as draw-lattice.

   For this we need some abstrace picture-drawing facility, which can
   produce pictures without showing them. For that we could use svg
   (also as output format for layouts) and simply write it to a file.
* IO
** TODO Add tests for explicit IO formats
   given as keywords or strings.
** TODO Allow additional arguments to write-context
   depending on the current layout.
** TODO More IO formats for contexts [2/5]
   - [X] anonymous burmeister (without names for objects and
     attributes)
   - [ ] csc
   - [ ] slf
   - [ ] csx
   - [X] binary csv
** TODO Lattice IO for csv and dot
   That should be simple for output, but non-trivial for input.
** TODO Add support for multiple contexts/... in IO
   I.e. a call like

     (write-context :conexp "/tmp/file" ctx-1 ctx-2 ctx-3)

   should be possible. read-context then should also take an index of
   which context to read in.
* Tests
** TODO Improve test coverage of conexp contrib [0/12]                    :7:
   - [ ] algorithms
   - [ ] concept approximation
   - [ ] DL
   - [ ] draw (?)
   - [ ] exec
   - [ ] experimental
   - [ ] factor analysis
   - [ ] fuzzy [0/3]
     - [ ] logics
     - [ ] sets
     - [ ] fca
   - [ ] GUI (?)
   - [ ] Java
   - [ ] retracts
   - [ ] util [0/1]
     - [ ] general sorted sets
** TODO Add tests for new Association Rule functions                      :7:
** TODO Add tests for exploration with incomplete counterexamples         :7:
* Layout
** TODO Add more layout output [0/2]
   - [ ] svg
   - [ ] povray
** TODO Rewrite to-inf-additive-layout                                    :7:
   As projection into the subspace of all infimum-additive layouts.
** TODO Implement Christians Force Layout with derivations
* Documentation
** NEXT Write Wiki [4/7]
   - [X] Getting Started
   - [X] Basic Notation and Syntax
   - [-] Basic Usage
     - [X] Creating and Working with Formal Contexts
     - [ ] Concept Lattices
     - [X] IO
     - [ ] Implications
     - [X] Exploration
     - [X] Scaling Many-Valued Contexts
   - [ ] Advanced Usage
     - [ ] Factorizing Formal Contexts
     - [ ] Fuzzy FCA in conexp-clj
   - [ ] Use cases of conexp-clj
     - [ ] A Formal Context of Functions
     - [ ] Context of All Permutations on a Finite Set
     - [ ] The Tamari Lattice
   - [X] Other Features
     - [X] Using conexp-clj from sage
     - [X] Calling conexp-clj functions from Java
   - [X] API documentation
** DONE API documentation on the Wiki
* Core
** TODO Change attribute names for mv-context scales                      :7:
   They are somewhat arbitrary and may also be misleading. Don't
   forget to adjust the tests for them after finishing.
** TODO Make luxenburger-base parallel                                    :7:
** TODO Rule Exploration with Impex
** TODO Incorporate clojure.core.reducers                                 :7:
** TODO Exploration: answer questions from within the repl                :7:
* GUI
** TODO Allow resizing of cells in GUI
   For this a special mouse handler has to be implemented that changes the cursor when
   resizing is possible.  Resizing itself must be done via setRowHeight() or one of
   TableColumns methods for setting the width of a column.
** TODO Use breakable tool bar for context editor
** TODO GUI context editor
** TODO GUI lattice editor
** TODO GUI code editor
** TODO GUI plugin browser
** TODO Undo for GUI
** DONE Fix neverending rotation when choosing another tab
* Bugs
** DONE Fix error for conexp-clj's gui                                    :7:
   - State "DONE"       from "TODO"       [2013-09-26 Do 15:25]
   CLOCK: [2013-08-21 Mi 12:39]--[2013-08-21 Mi 12:39] =>  0:00
   Added: [2013-08-21 Mi 12:39]
** DONE conexp-clj: find out whether there is a bug in canonical-base with background knowledge
   - State "DONE"       from "NEXT"       [2013-09-04 Mi 18:02] \\
     Apparently, there was one: the computation of the canonical base with background
     knowledge unconditionally started with ∅ as the first premises, which is not correct if
     one has implications of the form ∅ ⇒ A for some A ⊆ M.  Fixed that, added some (small)
     test case for it and added Johannes as contributor to conexp-clj.
   - State "NEXT"       from "TODO"       [2013-09-04 Mi 17:10] \\
     Making first reasonability tests with the data from Johannes
   See Johannes information on this
   :LOGBOOK:
   CLOCK: [2013-09-04 Mi 17:11]--[2013-09-04 Mi 18:02] =>  0:51
   CLOCK: [2013-09-04 Mi 15:50]--[2013-09-04 Mi 15:51] =>  0:01
   :END:
   Added: [2013-09-04 Mi 15:50]

** DONE Check whether counterexample is valid in incomplete exploration   :7:
   - State "DONE"       from "TODO"       [2013-09-30 Mo 14:02]
   :LOGBOOK:
   CLOCK: [2013-09-30 Mo 13:47]--[2013-09-30 Mo 14:02] =>  0:15
   :END:

